$mer-breakpoints:
  xs  400px 22.5rem,
  sm  600px 35rem,
  md  768px 45.5rem,
  lg  1024px 60rem,
  xlg 1280px 75rem;
$mer-flexboxgrid-max-width: 1400px;

$mer-max-width:                 1400;
$mer-column-count:              12;
$mer-gutter-width:              30;
$mer-gutter-width-new:          1.875rem;
$mer-outer-margin:              1.875rem;

$mer-gutter-compensation: $mer-gutter-width-new * .5 * -1;
$mer-half-gutter-width: $mer-gutter-width-new * .5;

.container {
  box-sizing: border-box;
  max-width: $mer-flexboxgrid-max-width;
  margin: 0 auto;
  padding: 0 _rem(20);
}

.container-fluid {
  margin-right: auto;
  margin-left: auto;
  padding-right: $mer-outer-margin;
  padding-left: $mer-outer-margin;
}

.row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $mer-gutter-compensation;
  margin-left: $mer-gutter-compensation;
}

.row.reverse {
  flex-direction: row-reverse;
}

.col.reverse {
  flex-direction: column-reverse;
}

@mixin flexboxgrid-sass-col-common {
  box-sizing: border-box;

  // split @include flex(0, 0, auto) into individual props
  flex-grow: 0;
  flex-shrink: 0;

  // we leave @include flex-basis(auto) out of common because
  // in some spots we need it and some we dont
  // more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126

  padding-right: $mer-half-gutter-width;
  padding-left: $mer-half-gutter-width;
}

//* This should be fixed and added below with an if statement
$name: xs;
.col-#{$name} {
  @include flexboxgrid-sass-col-common;
  flex-basis: auto;
}
@for $i from 1 through $mer-column-count {
  .col-#{$name}-#{$i} {
    @include flexboxgrid-sass-col-common;
    // @include flex-basis(100% / $mer-column-count * $i);
    flex-basis: calc(100% / $mer-column-count * $i);
    max-width: calc(100% / $mer-column-count * $i);
  }
}
@for $i from 1 through $mer-column-count {
  .col-#{$name}-offset-#{$i} {
    @include flexboxgrid-sass-col-common;
    margin-left: calc(100% / $mer-column-count * $i);
  }
}
.col-#{$name} {
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}
.start-#{$name} {
  justify-content: flex-start;
  text-align: start;
}

.center-#{$name} {
  justify-content: center;
  text-align: center;
}

.end-#{$name} {
  justify-content: flex-end;
  text-align: end;
}

.top-#{$name} {
  align-items: flex-start;
}

.middle-#{$name} {
  align-items: center;
}

.bottom-#{$name} {
  align-items: flex-end;
}

.around-#{$name} {
  justify-content: space-around;
}

.between-#{$name} {
  justify-content: space-between;
}

.first-#{$name} {
  order: -1;
}

.last-#{$name} {
  order: 1;
}


@each $breakpoint in $mer-breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);
  $container: nth($breakpoint, 3);
  @media only screen and (min-width: $size) {
    // .container {
    //   width: $container;
    // }

    .col-#{$name} {
      @include flexboxgrid-sass-col-common;
      flex-basis: auto;
    }
    @for $i from 1 through $mer-column-count {
      .col-#{$name}-#{$i} {
        @include flexboxgrid-sass-col-common;
        flex-basis: calc(100% / $mer-column-count * $i);
        max-width: calc(100% / $mer-column-count * $i);
      }
    }
    .col-#{$name}-offset-0 {
      @include flexboxgrid-sass-col-common;
      margin-left: 0;
    }
    @for $i from 1 through $mer-column-count {
      .col-#{$name}-offset-#{$i} {
        @include flexboxgrid-sass-col-common;
        margin-left: calc(100% / $mer-column-count * $i)
      }
    }
    .col-#{$name} {
      flex-grow: 1;
      flex-basis: 0;
      max-width: 100%;
    }
    .start-#{$name} {
      justify-content: flex-start;
      text-align: start;
    }

    .center-#{$name} {
      justify-content: center;
      text-align: center;
    }

    .end-#{$name} {
      justify-content: flex-end;
      text-align: end;
    }

    .top-#{$name} {
      justify-content: flex-start;
    }

    .middle-#{$name} {
      align-items: center;
    }

    .bottom-#{$name} {
      align-items: flex-end;
    }

    .around-#{$name} {
      justify-content: space-around;
    }

    .between-#{$name} {
      justify-content: space-between;
    }

    .first-#{$name} {
      order: -1;
    }

    .last-#{$name} {
      order: 1;
    }
  }
}
